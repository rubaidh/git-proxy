#!/usr/bin/env ruby

require 'socket'

class PacketizedStream
  attr_accessor :istream, :ostream

  def initialize(istream, ostream = nil)
    @istream = istream
    if ostream.nil?
      @ostream = istream
    else
      @ostream = ostream
    end
    @istream.sync = @ostream.sync = true

    all_packetized_streams << self
  end

  def read
    header = @istream.read(4)
    if !header.nil?
      bytes_to_read = header.hex - 4
      if bytes_to_read > 0
        @istream.read(bytes_to_read)
      else
        ""
      end
    end
  end

  def write(str)
    if !str.nil? && str.length > 0
      @ostream.write(("%04x" % (str.length + 4)) + str)
    else
      @ostream.write("0000")
    end
  end

  def close
    @istream.close
    @ostream.close unless @ostream.closed?
  end

  def self.select_reads_on_all_packetized_streams
    packetized_versions_of(select(all_packetized_streams.map { |s| s.istream }).first)
  end

  private
  def all_packetized_streams
    self.class.all_packetized_streams
  end

  def self.all_packetized_streams
    @all_packetized_streams ||= []
  end

  def self.packetized_versions_of(streams)
    streams.map do |stream|
      all_packetized_streams.select { |s| s.istream == stream }
    end.flatten
  end
end

# This is the dumbest git proxy ever.  It just takes the messages from the
# client and passes them on to the server.
class DumbGitProxy
  def initialize(host, port)
    @client = PacketizedStream.new($stdin, $stdout)
    @server = PacketizedStream.new(TCPSocket.new(host, port))
  end

  def run
    catch(:eof) {
      loop do
        each_readable_stream do |stream|
          process_packet(stream)
        end
      end
    }
  end

  private
  def write_pair_for(socket)
    if socket == @client
      @server
    elsif socket == @server
      @client
    end
  end

  def each_readable_stream
    PacketizedStream.select_reads_on_all_packetized_streams.each do |stream|
      yield stream
    end
  end

  def process_packet(stream)
    data = stream.read
    check_for_eof(data)
    write_pair_for(stream).write(data)
  end

  def check_for_eof(data)
    if data.nil?
      @client.close
      @server.close
      throw :eof
    end
  end
end

host, port = ARGV
DumbGitProxy.new(host, port).run
