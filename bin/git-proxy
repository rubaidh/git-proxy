#!/usr/bin/env ruby

require 'socket'

def packet_dump(data, source)
  log data.inspect, source
end

def log(msg, source = nil)
  $stderr.puts((source.nil? ? "" : "#{source} ") + msg)
end

class PacketizedStream
  def initialize(real_stream)
    @real_stream = real_stream
    @real_stream.sync = true

    all_packetized_streams << real_stream
  end

  def read
    header = @real_stream.read(4)
    if !header.nil?
      bytes_to_read = header.hex - 4
      if bytes_to_read > 0
        @real_stream.read(bytes_to_read)
      else
        ""
      end
    end
  end

  def write(str)
    if !str.nil? && str.length > 0
      @real_stream.write(("%04x" % (str.length + 4)) + str)
    else
      @real_stream.write("0000")
    end
  end

  def self.select_reads_on_all_packetized_streams
    select(all_packetized_streams).first
  end

  private
  def all_packetized_streams
    self.class.all_packetized_streams
  end

  def self.all_packetized_streams
    @all_packetized_streams ||= []
  end
end

host, port = ARGV

$stderr.puts "Connecting to #{host}:#{port}"
socket = TCPSocket.new(host, port)

packetized_stdin  = PacketizedStream.new($stdin)
packetized_stdout = PacketizedStream.new($stdout)
packetized_socket = PacketizedStream.new(socket)

loop do
  readable = PacketizedStream.select_reads_on_all_packetized_streams
  if readable.include?($stdin)
    data = packetized_stdin.read
    packet_dump data, ">"
    packetized_socket.write(data)
    if data.nil?
      $stdin.close
      socket.close
      break
    end
  elsif readable.include?(socket)
    data = packetized_socket.read
    packet_dump data, "<"
    packetized_stdout.write(data)
  end
end
