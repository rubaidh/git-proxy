#!/usr/bin/env ruby

require 'socket'

def packet_dump(data, source)
  log data.inspect, source
end

def log(msg, source = nil)
  $stderr.puts((source.nil? ? "" : "#{source} ") + msg)
end

class PacketizedStream
  attr_accessor :istream, :ostream

  def initialize(istream, ostream = nil)
    @istream = istream
    if ostream.nil?
      @ostream = istream
    else
      @ostream = ostream
    end
    @istream.sync = @ostream.sync = true

    all_packetized_streams << self
  end

  def read
    header = @istream.read(4)
    if !header.nil?
      bytes_to_read = header.hex - 4
      if bytes_to_read > 0
        @istream.read(bytes_to_read)
      else
        ""
      end
    end
  end

  def write(str)
    if !str.nil? && str.length > 0
      @ostream.write(("%04x" % (str.length + 4)) + str)
    else
      @ostream.write("0000")
    end
  end

  def self.select_reads_on_all_packetized_streams
    packetized_versions_of(select(all_packetized_streams.map { |s| s.istream }).first)
  end

  private
  def all_packetized_streams
    self.class.all_packetized_streams
  end

  def self.all_packetized_streams
    @all_packetized_streams ||= []
  end

  def self.packetized_versions_of(streams)
    streams.map do |stream|
      all_packetized_streams.select { |s| s.istream == stream }
    end.flatten
  end
end

host, port = ARGV

$stderr.puts "Connecting to #{host}:#{port}"
socket = TCPSocket.new(host, port)

packetized_client  = PacketizedStream.new($stdin, $stdout)
packetized_socket = PacketizedStream.new(socket)

loop do
  readable = PacketizedStream.select_reads_on_all_packetized_streams
  if readable.include?(packetized_client)
    data = packetized_client.read
    packet_dump data, ">"
    packetized_socket.write(data)
    if data.nil?
      $stdin.close
      socket.close
      break
    end
  elsif readable.include?(packetized_socket)
    data = packetized_socket.read
    packet_dump data, "<"
    packetized_client.write(data)
  end
end
